#include "icon_bit.h"

#include "allFonts.h"
#include "../gui/gui_task.h"
#include "../gui/menus/abstractmenu.h"

const uint8_t icon_bit[]={
	0xFE, 0x02, 0x02, 0xF2, 0xF2, 0xF2, 0xE6, 0x0E, 0x1E, 0xFE, 0x02, 0x02, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
	0x7F, 0x40, 0x40, 0x4F, 0x4F, 0x4F, 0x67, 0x70, 0x78, 0x7F, 0x40, 0x40, 0x4F, 0x4F, 0x4F, 0x4F, 0x7F,   // DL
	0xFE, 0xF2, 0xF2, 0x02, 0x02, 0xF2, 0xF2, 0xFE, 0xFE, 0x02, 0x02, 0x72, 0x72, 0x72, 0x02, 0x06, 0xFE,
	0x7F, 0x7F, 0x7F, 0x40, 0x40, 0x7F, 0x7F, 0x7F, 0x7F, 0x40, 0x40, 0x7C, 0x78, 0x72, 0x66, 0x4F, 0x7F,   // TR
    0xFE, 0x02, 0x02, 0x72, 0x72, 0x72, 0x02, 0x06, 0xFE, 0x02, 0x02, 0xFE, 0xFE, 0xFE, 0x02, 0x02, 0xFE,
    0x7F, 0x40, 0x40, 0x7C, 0x78, 0x72, 0x66, 0x4F, 0x7F, 0x78, 0x70, 0x63, 0x47, 0x63, 0x70, 0x78, 0x7F,   // RV
    0xFE, 0x02, 0x02, 0x72, 0x72, 0x72, 0x72, 0x72, 0xFE, 0x02, 0x02, 0x72, 0x72, 0x72, 0x02, 0x06, 0xFE,
    0x7F, 0x40, 0x40, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x7F, 0x40, 0x40, 0x7C, 0x78, 0x72, 0x66, 0x4F, 0x7F,   // ER
    0xFE, 0x02, 0x02, 0x72, 0x72, 0x72, 0x72, 0x72, 0xFE, 0x06, 0x02, 0xF2, 0xF2, 0xF2, 0x02, 0x06, 0xFE,
    0x7F, 0x40, 0x40, 0x4E, 0x4E, 0x4E, 0x4E, 0x4E, 0x7F, 0x60, 0x40, 0x4F, 0x4F, 0x57, 0x68, 0x50, 0x7F,   // EQ
    0xFE, 0x06, 0x02, 0xF2, 0xF2, 0xF2, 0xF2, 0xF6, 0xFE, 0x02, 0x02, 0x7E, 0x7E, 0x7E, 0x02, 0x02, 0xFE,
    0x7F, 0x60, 0x40, 0x4F, 0x4F, 0x4F, 0x4F, 0x6F, 0x7F, 0x40, 0x40, 0x7E, 0x7E, 0x7E, 0x40, 0x40, 0x7F,   // CH
    0xFE, 0x06, 0x02, 0x72, 0x72, 0x72, 0x72, 0xF6, 0xFE, 0x06, 0x02, 0xF2, 0xF2, 0xF2, 0xF2, 0xF6, 0xFE,
    0x7F, 0x6F, 0x4E, 0x4E, 0x4E, 0x4E, 0x40, 0x60, 0x7F, 0x60, 0x40, 0x4F, 0x4F, 0x4F, 0x4F, 0x6F, 0x7F,   // SC
    0xFE, 0x06, 0x02, 0xF2, 0xF2, 0xF2, 0xF2, 0xF6, 0xFE, 0x06, 0x02, 0xF2, 0xF2, 0xF2, 0xF2, 0xF6, 0xFE,
    0x7F, 0x60, 0x40, 0x4F, 0x4F, 0x4F, 0x4F, 0x6F, 0x7F, 0x60, 0x40, 0x4F, 0x4F, 0x4F, 0x4F, 0x6F, 0x7F,   // CC
    0xFE, 0x02, 0x02, 0xF2, 0xF2, 0xF2, 0x02, 0x06, 0xFE, 0x06, 0x02, 0xF2, 0xF2, 0xF2, 0x02, 0x06, 0xFE,
    0x7F, 0x40, 0x40, 0x7C, 0x7C, 0x7C, 0x7C, 0x7E, 0x7F, 0x40, 0x40, 0x7C, 0x7C, 0x7C, 0x40, 0x40, 0x7F,   // PA
    0xFE, 0x02, 0x02, 0xF2, 0xF2, 0xF2, 0x02, 0x06, 0xFE, 0x02, 0x02, 0x7E, 0x7E, 0x7E, 0x02, 0x02, 0xFE,
    0x7F, 0x40, 0x40, 0x7C, 0x7C, 0x7C, 0x7C, 0x7E, 0x7F, 0x40, 0x40, 0x7E, 0x7E, 0x7E, 0x40, 0x40, 0x7F,   // PH
    0xFE, 0x02, 0x02, 0x72, 0x72, 0x72, 0x72, 0xF2, 0xF2, 0xFE, 0x02, 0x02, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE,
    0x7F, 0x40, 0x40, 0x7E, 0x7E, 0x7E, 0x7E, 0x7F, 0x7F, 0x7F, 0x40, 0x40, 0x4F, 0x4F, 0x4F, 0x4F, 0x7F,   // FL
	0xFE, 0x06, 0x02, 0x72, 0x72, 0x72, 0x72, 0xF6, 0xFE, 0xE2, 0xCE, 0x9E, 0x1E, 0x9E, 0xCE, 0xE2, 0xFE,
	0x7F, 0x6F, 0x4E, 0x4E, 0x4E, 0x4E, 0x40, 0x60, 0x7F, 0x7F, 0x7F, 0x7F, 0x40, 0x7F, 0x7F, 0x7F, 0x7F,   // SY
	0xFE, 0x02, 0x02, 0x72, 0x72, 0x72, 0x02, 0x02, 0xFE, 0x02, 0x02, 0x72, 0x72, 0x72, 0x02, 0x06, 0xFE,
	0x7F, 0x40, 0x40, 0x7E, 0x7E, 0x7E, 0x7E, 0x7E, 0x7F, 0x40, 0x40, 0x7C, 0x78, 0x72, 0x66, 0x4E, 0x7F,   // PR
	0xFE, 0x06, 0x02, 0xF2, 0xF2, 0xF2, 0xF2, 0xF6, 0xFE, 0x02, 0x06, 0xCE, 0x9E, 0xCE, 0x06, 0x02, 0xFE,
	0x7F, 0x60, 0x40, 0x4F, 0x4F, 0x4F, 0x4F, 0x6F, 0x7F, 0x40, 0x40, 0x7F, 0x7F, 0x7F, 0x40, 0x40, 0x7F,   // CM
	0xFE, 0x06, 0x02, 0xF2, 0x72, 0x72, 0x72, 0xF6, 0xFE, 0xF2, 0xF2, 0x02, 0x02, 0x02, 0xF2, 0xF2, 0xFE,
	0x7F, 0x60, 0x40, 0x4F, 0x4E, 0x4E, 0x40, 0x60, 0x7F, 0x7F, 0x7F, 0x40, 0x40, 0x40, 0x7F, 0x7F, 0x7F,   // GT
	0xFE, 0x02, 0x02, 0x72, 0x72, 0x72, 0x02, 0x06, 0xFE, 0x02, 0x02, 0x72, 0x72, 0x72, 0x72, 0xF2, 0xFE,
	0x7F, 0x40, 0x40, 0x7C, 0x78, 0x72, 0x66, 0x4F, 0x7F, 0x40, 0x40, 0x7E, 0x7E, 0x7E, 0x7E, 0x7F, 0x7F    // RF
};

const uint8_t strelk[]={
	0x60, 0x50, 0x48, 0x44, 0x42,0x41,//UP
	0x42, 0x44, 0x48, 0x50, 0x60,0x00,
	0x06, 0x0a, 0x12, 0x22, 0x42,0x82,//DOWN
	0x42, 0x22, 0x12, 0x0a, 0x06,0x00
};

icon_t iconFormMenuType(gui_menu_type menuType)
{
	return (icon_t)(menuType - MENU_DELAY);
}

void icon_print(icon_t num, strelka_t strel)
{
	uint8_t col = 111;
	uint8_t col1 = 114;
	uint16_t a = num * 34;
	for(int i = 0 ; i < 2 ; i++)
	{
//		if(((current_menu == MENU_PA) || (current_menu == MENU_PREAMP)) && (par_num < 3)) Set_Page_Address(i);
		/*else*/ Set_Page_Address(i+1);
		Set_Column_Address(col);
	  	GPIO_ResetBits(GPIOB,CS);
	  	GPIO_SetBits(GPIOB,RS);
		for(int j = 0 ; j < 17 ; j++)
		{
			oled023_1_send_data(icon_bit[a++]);
		}
		GPIO_SetBits(GPIOB,CS);
	}
	switch (strel){
	case 0:break;
	case 1:{
		Set_Page_Address(0);
		Set_Column_Address(col1);
	  	GPIO_ResetBits(GPIOB,CS);
	  	GPIO_SetBits(GPIOB,RS);
		for(uint32_t i = 0 ; i < 12 ; i++)oled023_1_send_data(strelk[i]);
		GPIO_SetBits(GPIOB,CS);
		Set_Page_Address(3);
		Set_Column_Address(col1);
	  	GPIO_ResetBits(GPIOB,CS);
	  	GPIO_SetBits(GPIOB,RS);
		for(uint32_t i = 12 ; i < 24 ; i++)oled023_1_send_data(0);
		GPIO_SetBits(GPIOB,CS);
		break;
	}
	case 2:{
//		if(!(((current_menu == MENU_PA) || (current_menu == MENU_PREAMP)) && (par_num < 3)))
//		{
			Set_Page_Address(0);
			Set_Column_Address(col1);
			GPIO_ResetBits(GPIOB,CS);
			GPIO_SetBits(GPIOB,RS);
			for(uint32_t i = 0 ; i < 12 ; i++)oled023_1_send_data(0);
			GPIO_SetBits(GPIOB,CS);
//		}
//		if(((current_menu == MENU_PA) || (current_menu == MENU_PREAMP)) && (par_num < 3)) Set_Page_Address(2);
		/*else*/ Set_Page_Address(3);
		Set_Column_Address(col1);
	  	GPIO_ResetBits(GPIOB,CS);
	  	GPIO_SetBits(GPIOB,RS);
		for(uint32_t i = 12 ; i < 24 ; i++)oled023_1_send_data(strelk[i]);
		GPIO_SetBits(GPIOB,CS);
		break;
	}
	case 3:{
		Set_Page_Address(0);
		Set_Column_Address(col1);
	  	GPIO_ResetBits(GPIOB,CS);
	  	GPIO_SetBits(GPIOB,RS);
		for(uint32_t i = 0 ; i < 12 ; i++)oled023_1_send_data(strelk[i]);
		GPIO_SetBits(GPIOB,CS);
		Set_Page_Address(3);
		Set_Column_Address(col1);
	  	GPIO_ResetBits(GPIOB,CS);
	  	GPIO_SetBits(GPIOB,RS);
		for(uint32_t i = 12 ; i < 24 ; i++)oled023_1_send_data(strelk[i]);
		GPIO_SetBits(GPIOB,CS);
		break;
	}
	}
}

void strel_print(uint8_t col , uint8_t pag , uint8_t dir)
{
	Set_Page_Address(pag);
	Set_Column_Address(col);
  	GPIO_ResetBits(GPIOB,CS);
  	GPIO_SetBits(GPIOB,RS);
	if(dir)for(uint32_t i = 0 ; i < 12 ; i++)oled023_1_send_data(strelk[i]);
	else for(uint32_t i = 12 ; i < 24 ; i++)oled023_1_send_data(strelk[i]);
	GPIO_SetBits(GPIOB,CS);
}

