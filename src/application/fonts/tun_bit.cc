#include "appdefs.h"
#include "tun_bit.h"
#include "ER_OLEDM023-1B.h"
#include "spectrum.h"


const uint8_t di_tun[] = {
		0x60, 0x06, 0x60, 0x3E, 0xE0, 0x3F, 0xFE, 0x3F, 0xFE, 0x07, 0x7E, 0x3E, 0xE0, 0x3F, 0xFE, 0x3F, 0xFE, 0x07, 0x7E, 0x06, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00
        };
void diez_tun(void)
{
	for(uint8_t i = 0 ; i < 2 ; i++)
	{
		Set_Column_Address(74);
		Set_Page_Address(i);
		GPIO_ResetBits(GPIOB,CS);
		for(uint8_t f = 0; f < 13 ; f++)oled023_1_send_data(di_tun[f*2 + i]);
		GPIO_SetBits(GPIOB,CS);
	}
}
const uint8_t not_tun[] = {
        0x00, 0x00, 0xF0, 0x01, 0xFC, 0x07, 0xFE, 0x0F, 0x0F, 0x1E, 0x07, 0x1C, 0x03, 0x18, 0x03, 0x18, 0x03, 0x18, 0x07, 0x1C, 0x0E, 0x0E, 0x0E, 0x0E, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00,  // Code for char C
        0x00, 0x00, 0x00, 0x00, 0xFF, 0x1F, 0xFF, 0x1F, 0xFF, 0x1F, 0x03, 0x18, 0x03, 0x18, 0x03, 0x18, 0x03, 0x18, 0x07, 0x1C, 0x0F, 0x1E, 0xFE, 0x0F, 0xFC, 0x07, 0xF8, 0x01, 0x00, 0x00,  // Code for char D
        0x00, 0x00, 0x00, 0x00, 0xFF, 0x1F, 0xFF, 0x1F, 0xFF, 0x1F, 0x63, 0x18, 0x63, 0x18, 0x63, 0x18, 0x63, 0x18, 0x63, 0x18, 0x63, 0x18, 0x63, 0x18, 0x03, 0x18, 0x00, 0x00, 0x00, 0x00,  // Code for char E
        0x00, 0x00, 0x00, 0x00, 0xFF, 0x1F, 0xFF, 0x1F, 0xFF, 0x1F, 0x63, 0x00, 0x63, 0x00, 0x63, 0x00, 0x63, 0x00, 0x63, 0x00, 0x63, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char F
        0x00, 0x00, 0xF0, 0x01, 0xFC, 0x07, 0xFE, 0x0F, 0x0E, 0x0E, 0x07, 0x1C, 0x03, 0x18, 0xC3, 0x18, 0xC3, 0x18, 0xC3, 0x18, 0xC7, 0x1C, 0xCE, 0x0F, 0xCE, 0x0F, 0xCC, 0x07, 0x00, 0x00,  // Code for char G
        0x00, 0x00, 0x00, 0x18, 0x00, 0x1F, 0xE0, 0x1F, 0xFC, 0x07, 0xFF, 0x03, 0x1F, 0x03, 0x1F, 0x03, 0xFF, 0x03, 0xFC, 0x07, 0xE0, 0x1F, 0x00, 0x1F, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,  // Code for char A
        0x00, 0x00, 0x00, 0x00, 0xFF, 0x1F, 0xFF, 0x1F, 0xFF, 0x1F, 0x63, 0x18, 0x63, 0x18, 0x63, 0x18, 0x63, 0x18, 0xFF, 0x1C, 0xFE, 0x1F, 0xDC, 0x0F, 0x80, 0x07, 0x00, 0x00, 0x00, 0x00   // Code for char B
        };
const uint8_t tire[] = {0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0x00, 0x00};
const uint8_t not_ind[] = {0,0,1,1,2,3,3,4,4,5,5,6};
extern uint32_t ind_out_l[];
void note_tun(void)
{
	for(uint8_t i = 0 ; i < 2 ; i++)
	{
		Set_Column_Address(74);
		Set_Page_Address(i);
		GPIO_ResetBits(GPIOB,CS);
		for(uint8_t f = 0; f < 13 ; f++)oled023_1_send_data(0);
		GPIO_SetBits(GPIOB,CS);
	}
	for(uint8_t i = 0 ; i < 2 ; i++)
	{
		Set_Column_Address(56);
		Set_Page_Address(i);
		GPIO_ResetBits(GPIOB,CS);
		if(ind_out_l[1] > 1500)for(uint8_t f = 0; f < 15 ; f++)oled023_1_send_data(not_tun[f*2 + i + not_ind[t_no]*30]);
		else for(uint8_t f = 0; f < 15 ; f++)oled023_1_send_data(tire[f*2 + i]);
		if(((t_no == 1) || (t_no == 3) || (t_no == 6) || (t_no == 8) || (t_no == 10)) && (ind_out_l[1] > 500))diez_tun();
		GPIO_SetBits(GPIOB,CS);
	}
	ind_out_l[1] = 0;
}

float tun_base_old;

const uint8_t strelk_tun[] = {0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFE, 0xFC, 0xF8, 0xF0, 0xE0, 0xC0, 0x80};
void strel_tun(void)
{
	if(t_po1 != t_po)
	{
		Set_Page_Address(3);
		Set_Column_Address(t_po1 - 8);
		GPIO_ResetBits(GPIOB,CS);
		for(uint8_t i = 0 ; i < 15 ; i++)oled023_1_send_data(0);
		GPIO_SetBits(GPIOB,CS);
		if(ind_out_l[1] < 1500)t_po = 64;

		if(t_po1 < t_po)t_po1 += ( t_po - t_po1)/4 + 1;
		if(t_po1 > t_po)t_po1 -= ( t_po1 -t_po)/4 + 1;

		if((t_po1 > 62) && (t_po1 < 66))GPIO_SetBits(GPIOB,GPIO_Pin_11);
		else GPIO_ResetBits(GPIOB,GPIO_Pin_11);
		Set_Column_Address(t_po1 - 8);
		GPIO_ResetBits(GPIOB,CS);
		for(uint8_t i = 0 ; i < 15 ; i++)oled023_1_send_data(strelk_tun[i]);
		GPIO_SetBits(GPIOB,CS);
	}
	if(notee)
	{
		notee = 0;
		note_tun();
	}
	if(tun_base_old != SpectrumTask->ref_freq)
	{
		tun_base_old = SpectrumTask->ref_freq;
		inline void par_ind_num_(uint8_t col , uint8_t pag , uint16_t val);
		inline void Arsys_line(uint8_t col , uint8_t pag , uint8_t* adr ,uint8_t curs);
		par_ind_num_(10,0,(uint16_t)SpectrumTask->ref_freq);
		Arsys_line(30,0,(uint8_t*)"Hz",0);
	}
}
const  uint8_t scale_tun[] = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xE0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xF0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xF8, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFC, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x83, 0x87, 0x8F, 0x9F, 0xBF, 0x7F   // Code for char
		        };
void scal_tun(void)
{
	Set_Column_Address(0);
	Set_Page_Address(2);
	GPIO_ResetBits(GPIOB,CS);
	for(uint8_t i = 0 ; i < 127 ; i++)
	{
		if(i < 64)oled023_1_send_data(scale_tun[i]);
		else oled023_1_send_data(scale_tun[126 - i]);
	}
	GPIO_SetBits(GPIOB,CS);
}


