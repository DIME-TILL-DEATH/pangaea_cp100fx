#include "fonts/ER_OLEDM023-1B.h"
uint8_t prog_cur;
volatile uint8_t prog_sym_cur = 0;
const uint8_t Tahoma33x30[] = {
        0x80, 0xFF, 0x01, 0xF0, 0xFF, 0x0F, 0xF8, 0xFF, 0x1F, 0xFC, 0xFF, 0x3F, 0xFE, 0xFF, 0x7F, 0xFE, 0xFF, 0x7F, 0x7F, 0x00, 0xFE, 0x1F, 0x00, 0xF8, 0x0F, 0x00, 0xF0, 0x0F, 0x00, 0xF0, 0x0F, 0x00, 0xF0, 0x1F, 0x00, 0xF8, 0x7F, 0x00, 0xFE, 0xFE, 0xFF, 0x7F, 0xFE, 0xFF, 0x7F, 0xFC, 0xFF, 0x3F, 0xF8, 0xFF, 0x1F, 0xF0, 0xFF, 0x0F, 0x80, 0xFF, 0x01,  // Code for char 0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0xF0, 0x78, 0x00, 0xF0, 0x78, 0x00, 0xF0, 0x78, 0x00, 0xF0, 0x7C, 0x00, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00,  // Code for char 1
        0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x7E, 0x00, 0xF8, 0x3E, 0x00, 0xF8, 0x3E, 0x00, 0xFC, 0x1F, 0x00, 0xFE, 0x1F, 0x00, 0xFF, 0x1F, 0x80, 0xFF, 0x1F, 0xC0, 0xFF, 0x1F, 0xE0, 0xF7, 0x3F, 0xF0, 0xF7, 0x3F, 0xF8, 0xF3, 0xFF, 0xFF, 0xF1, 0xFE, 0xFF, 0xF0, 0xFE, 0x7F, 0xF0, 0xFC, 0x3F, 0xF0, 0xF8, 0x0F, 0xF0, 0xF0, 0x03, 0xF0, 0x00, 0x00, 0xF0,  // Code for char 2
        0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x00, 0x7C, 0x3E, 0x00, 0x7C, 0x3E, 0x00, 0xFC, 0x1F, 0x00, 0xF8, 0x1F, 0x1E, 0xF8, 0x1F, 0x1E, 0xF8, 0x1F, 0x1E, 0xF8, 0x1F, 0x1E, 0xF8, 0x3F, 0x1F, 0xFC, 0xFF, 0x3F, 0xFC, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0x7F, 0xFE, 0xFB, 0x7F, 0xFC, 0xF1, 0x3F, 0xF8, 0xF0, 0x1F, 0x00, 0xC0, 0x07, 0x00, 0x00, 0x00,  // Code for char 3
        0x00, 0xE0, 0x03, 0x00, 0xF0, 0x03, 0x00, 0xFC, 0x03, 0x00, 0xFE, 0x03, 0x80, 0xFF, 0x03, 0xC0, 0xDF, 0x03, 0xE0, 0xC7, 0x03, 0xF8, 0xC3, 0x03, 0xFC, 0xC0, 0x03, 0x7F, 0xC0, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xC0, 0x03, 0x00, 0xC0, 0x03, 0x00, 0xC0, 0x03,  // Code for char 4
        0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xFF, 0x1F, 0x7E, 0xFF, 0x1F, 0x7C, 0xFF, 0x0F, 0xFC, 0xFF, 0x0F, 0xF8, 0xFF, 0x0F, 0xF8, 0xFF, 0x0F, 0xF8, 0x0F, 0x0F, 0xF8, 0x0F, 0x0F, 0xF8, 0x0F, 0x0F, 0xF8, 0x0F, 0x1F, 0xFC, 0x0F, 0x3F, 0xFE, 0x0F, 0xFF, 0x7F, 0x0F, 0xFE, 0x7F, 0x0F, 0xFE, 0x3F, 0x0F, 0xFC, 0x3F, 0x0F, 0xF8, 0x0F, 0x00, 0xF0, 0x03,  // Code for char 5
        0x00, 0x00, 0x00, 0x00, 0xFF, 0x03, 0xC0, 0xFF, 0x0F, 0xF0, 0xFF, 0x1F, 0xF8, 0xFF, 0x3F, 0xFC, 0xFF, 0x7F, 0xFE, 0xFF, 0x7F, 0xFE, 0x0E, 0xFC, 0x3E, 0x0E, 0xF8, 0x1F, 0x0F, 0xF0, 0x0F, 0x0F, 0xF0, 0x0F, 0x0F, 0xF0, 0x0F, 0x1F, 0xFC, 0x0F, 0xFF, 0xFF, 0x0F, 0xFF, 0x7F, 0x0F, 0xFE, 0x7F, 0x1F, 0xFE, 0x3F, 0x00, 0xFC, 0x1F, 0x00, 0xF0, 0x07,  // Code for char 6
        0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x0F, 0x00, 0x80, 0x0F, 0x00, 0xE0, 0x0F, 0x00, 0xF8, 0x0F, 0x00, 0xFE, 0x0F, 0x80, 0xFF, 0x0F, 0xC0, 0xFF, 0x0F, 0xF0, 0xFF, 0x0F, 0xFC, 0x3F, 0x0F, 0xFF, 0x0F, 0xCF, 0xFF, 0x07, 0xFF, 0xFF, 0x01, 0xFF, 0x7F, 0x00, 0xFF, 0x1F, 0x00, 0xFF, 0x07, 0x00, 0xFF, 0x01, 0x00, 0x7F, 0x00, 0x00, 0x1F, 0x00, 0x00,  // Code for char 7
        0x00, 0x80, 0x0F, 0xF0, 0xC1, 0x1F, 0xFC, 0xE3, 0x3F, 0xFC, 0xF7, 0x7F, 0xFE, 0xFF, 0x7F, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0xFC, 0x1F, 0x1F, 0xF8, 0x0F, 0x1E, 0xF0, 0x0F, 0x3E, 0xF0, 0x0F, 0x3E, 0xF0, 0x1F, 0x7E, 0xF0, 0xFF, 0xFF, 0xF8, 0xFE, 0xFF, 0x7F, 0xFE, 0xFF, 0x7F, 0xFE, 0xF3, 0x7F, 0xFC, 0xF1, 0x3F, 0xF0, 0xE0, 0x1F, 0x00, 0x80, 0x0F,  // Code for char 8
        0xE0, 0x0F, 0x00, 0xF8, 0x3F, 0x00, 0xFC, 0x7F, 0xF8, 0xFC, 0x7F, 0xF0, 0xFE, 0xFF, 0xF0, 0xFE, 0xFF, 0xF0, 0x3F, 0xF8, 0xF0, 0x0F, 0xF0, 0xF0, 0x0F, 0xF0, 0xF0, 0x0F, 0xF0, 0xF8, 0x1F, 0x70, 0x7C, 0x3F, 0x70, 0x7F, 0xFE, 0xFF, 0x7F, 0xFE, 0xFF, 0x3F, 0xFC, 0xFF, 0x1F, 0xF8, 0xFF, 0x0F, 0xF0, 0xFF, 0x03, 0xC0, 0x7F, 0x00, 0x00, 0x00, 0x00   // Code for char 9
        };
const uint8_t Tahoma33x30_[] = {
		0x80, 0xFF, 0x01, 0xF0, 0x00, 0x0F, 0x18, 0x00, 0x18, 0x0C, 0x00, 0x30, 0x06, 0x00, 0x60, 0xC2, 0xFF, 0x43, 0x73, 0x00, 0xCE, 0x19, 0x00, 0x98, 0x09, 0x00, 0x90, 0x09, 0x00, 0x90, 0x09, 0x00, 0x90, 0x19, 0x00, 0x98, 0x73, 0x00, 0xCE, 0xC2, 0xFF, 0x43, 0x06, 0x00, 0x60, 0x0C, 0x00, 0x30, 0x18, 0x00, 0x18, 0xF0, 0x00, 0x0F, 0x80, 0xFF, 0x01,  // Code for char 0
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0xF0, 0x48, 0x00, 0x90, 0x48, 0x00, 0x90, 0x48, 0x00, 0x90, 0x4C, 0x00, 0x90, 0xC6, 0xFF, 0x9F, 0x03, 0x00, 0x80, 0x01, 0x00, 0x80, 0x01, 0x00, 0x80, 0x01, 0x00, 0x80, 0xFF, 0xFF, 0x9F, 0x00, 0x00, 0x90, 0x00, 0x00, 0x90, 0x00, 0x00, 0x90, 0x00, 0x00, 0x90, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00,  // Code for char 1
        0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x7E, 0x00, 0x98, 0x22, 0x00, 0x88, 0x32, 0x00, 0x8C, 0x13, 0x00, 0x86, 0x11, 0x00, 0x83, 0x11, 0x80, 0x81, 0x11, 0xC0, 0x9C, 0x11, 0x60, 0x94, 0x31, 0x30, 0x96, 0x21, 0x18, 0x93, 0xE3, 0x8F, 0x91, 0x02, 0xC0, 0x90, 0x06, 0x60, 0x90, 0x0C, 0x38, 0x90, 0x18, 0x0E, 0x90, 0xF0, 0x03, 0x90, 0x00, 0x00, 0xF0,  // Code for char 2
        0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x00, 0x44, 0x22, 0x00, 0x44, 0x32, 0x00, 0xCC, 0x13, 0x00, 0x88, 0x11, 0x1E, 0x88, 0x11, 0x12, 0x88, 0x11, 0x12, 0x88, 0x11, 0x12, 0x88, 0x31, 0x13, 0x8C, 0xE1, 0x31, 0x84, 0x03, 0xE0, 0xC7, 0x02, 0x0E, 0x40, 0x06, 0x1B, 0x60, 0x8C, 0x11, 0x30, 0xF8, 0x70, 0x1C, 0x00, 0xC0, 0x07, 0x00, 0x00, 0x00,  // Code for char 3
        0x00, 0xFE, 0x03, 0x00, 0x03, 0x02, 0x80, 0x71, 0x02, 0xC0, 0x58, 0x02, 0x60, 0x4C, 0x02, 0x30, 0x46, 0x02, 0x18, 0x43, 0x02, 0x8C, 0x41, 0x02, 0xC6, 0x40, 0x02, 0x43, 0x40, 0x02, 0xC1, 0x7F, 0xFE, 0x01, 0x00, 0x80, 0x01, 0x00, 0x80, 0x01, 0x00, 0x80, 0x01, 0x00, 0x80, 0xFF, 0x7F, 0xFE, 0x00, 0x40, 0x02, 0x00, 0x40, 0x02, 0x00, 0xC0, 0x03,  // Code for char 4
        0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xFF, 0x1F, 0x46, 0x01, 0x18, 0x44, 0x01, 0x08, 0xCC, 0x01, 0x08, 0x88, 0x01, 0x08, 0x88, 0xF9, 0x09, 0x88, 0x09, 0x09, 0x88, 0x09, 0x09, 0x88, 0x09, 0x09, 0x88, 0x09, 0x19, 0x8C, 0x09, 0x31, 0xC6, 0x09, 0xE3, 0x43, 0x09, 0x02, 0x60, 0x09, 0x06, 0x20, 0x09, 0x0C, 0x38, 0x0F, 0x18, 0x0E, 0x00, 0xF0, 0x03,  // Code for char 5
        0x00, 0x00, 0x00, 0x00, 0xFF, 0x03, 0xC0, 0x01, 0x0E, 0x70, 0x00, 0x18, 0x18, 0x00, 0x30, 0x0C, 0x00, 0x60, 0x86, 0xFB, 0x47, 0xE2, 0x0A, 0xCC, 0x32, 0x0A, 0x98, 0x1B, 0x0B, 0x90, 0x09, 0x09, 0x90, 0x09, 0x09, 0x90, 0x09, 0x19, 0x9C, 0x09, 0xF1, 0xC7, 0x09, 0x03, 0x40, 0x09, 0x02, 0x60, 0x1F, 0x06, 0x30, 0x00, 0x1C, 0x1C, 0x00, 0xF0, 0x07,  // Code for char 6
        0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x09, 0x00, 0x80, 0x09, 0x00, 0xE0, 0x09, 0x00, 0xB8, 0x09, 0x00, 0x8E, 0x09, 0x80, 0x83, 0x09, 0xC0, 0x80, 0x09, 0x70, 0xE0, 0x09, 0x1C, 0x38, 0x09, 0x07, 0x0C, 0xC9, 0x01, 0x07, 0x79, 0xC0, 0x01, 0x01, 0x70, 0x00, 0x01, 0x1C, 0x00, 0x01, 0x07, 0x00, 0xC1, 0x01, 0x00, 0x71, 0x00, 0x00, 0x1F, 0x00, 0x00,  // Code for char 7
        0x00, 0x80, 0x0F, 0xF0, 0xC1, 0x18, 0x1C, 0x63, 0x30, 0x04, 0x36, 0x60, 0x06, 0x1C, 0x40, 0x02, 0xC0, 0xC7, 0xF3, 0x71, 0x8C, 0x19, 0x13, 0x98, 0x09, 0x12, 0x90, 0x09, 0x32, 0x90, 0x09, 0x22, 0x90, 0x19, 0x62, 0x90, 0xF3, 0xC3, 0xD8, 0x02, 0x80, 0x4F, 0x02, 0x1E, 0x40, 0x06, 0x13, 0x60, 0x9C, 0x31, 0x30, 0xF0, 0xE0, 0x18, 0x00, 0x80, 0x0F,  // Code for char 8
        0xE0, 0x0F, 0x00, 0x38, 0x38, 0x00, 0x0C, 0x60, 0xF8, 0x04, 0x40, 0x90, 0x06, 0xC0, 0x90, 0xE2, 0x8F, 0x90, 0x3B, 0x98, 0x90, 0x09, 0x90, 0x90, 0x09, 0x90, 0x90, 0x09, 0xD0, 0xD8, 0x19, 0x50, 0x4C, 0x33, 0x50, 0x47, 0xE2, 0xDF, 0x61, 0x06, 0x00, 0x30, 0x0C, 0x00, 0x18, 0x18, 0x00, 0x0E, 0x70, 0xC0, 0x03, 0xC0, 0x7F, 0x00, 0x00, 0x00, 0x00   // Code for char 9
        };
uint32_t t33x30_sym(uint8_t col , uint8_t pag , uint16_t sym)
{
    sym *= 57;
    uint8_t data;
    for(uint8_t j = 0 ; j < 3 ; j++)
    {
    	Set_Page_Address(j);
        Set_Column_Address(col);
        GPIO_SetBits(GPIOB,RS);
        GPIO_ResetBits(GPIOB,CS);
        for(uint32_t i = 0; i < 19 ; i++)
        {
        	if(!prog_sym_cur)data = Tahoma33x30[sym + i*3 + j];
        	else data = Tahoma33x30_[sym + i*3 + j];
        	//if(prog_cur)data = ~data;
        	oled023_1_send_data(data);
        }
        GPIO_SetBits(GPIOB,CS);
    }
    return 20;
}
void t33x30_clear(uint8_t col , uint8_t pag , uint8_t size)
{
  for(uint8_t i = 0 ; i < 4 ; i ++)
    {
      Set_Page_Address(pag+i);
      Set_Column_Address(col);
      GPIO_SetBits(GPIOB,RS);
      GPIO_ResetBits(GPIOB,CS);
      for(uint8_t j = 0 ; j < size ; j++)oled023_1_send_data(0);
	  GPIO_SetBits(GPIOB,CS);
    }
}
